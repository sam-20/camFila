import { Component, ViewChild, SecurityContext } from '@angular/core';
import { IonicPage, NavController, Platform, NavParams, AlertController, ToastController } from 'ionic-angular';
import { File } from '@ionic-native/file';
import { Storage } from '@ionic/Storage';
import { Media, MediaObject } from '@ionic-native/media';
import { MediaCapture, MediaFile, CaptureError, CaptureImageOptions, CaptureVideoOptions, CaptureAudioOptions } from '@ionic-native/media-capture';
import { CallNumber } from '@ionic-native/call-number';
import { Camera, CameraOptions } from '@ionic-native/camera'; /******************************************1 */
import { VideoPlayer, VideoOptions } from '@ionic-native/video-player';
import { StreamingMedia, StreamingAudioOptions, StreamingVideoOptions } from '@ionic-native/streaming-media'
import { VideoEditor, CreateThumbnailOptions } from '@ionic-native/video-editor/';
import { FileChooser } from '@ionic-native/file-chooser'
import { FilePath } from '@ionic-native/file-path';
import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer';
import { NativeAudio } from '@ionic-native/native-audio';
import { DomSanitizer } from '@angular/platform-browser';
import { DocumentPicker } from '@ionic-native/document-picker';
import { normalizeURL } from 'ionic-angular';
import { Base64 } from '@ionic-native/base64';
import { Chooser } from '@ionic-native/chooser';
import { FileOpener } from '@ionic-native/file-opener';
import { DocumentViewer, DocumentViewerOptions } from '@ionic-native/document-viewer'
import { InAppBrowser } from '@ionic-native/in-app-browser';

// const MEDIA_FILES_KEY = 'mediaFiles';

// declare var PDFViewer: any;
// declare var cordova: any;

@IonicPage()
@Component({
  selector: 'page-trending',
  templateUrl: 'trending.html',
})
export class TrendingPage {

download: boolean = true;
downloading: boolean = false;

// videoOpts: VideoOptions;

// @ViewChild('myvideo') myVideo: any;
// mediaFiles = [];

// recording: boolean = false;
// filePath: string;
// fileName: string;
// audio: MediaObject;
// audioList: any[] = [];

// myarray: any;
// somedata: any;

// mediaaudio: MediaObject;

// video1: any;
// video2: any;
// video3: any;
// video4: any;
// video5: any;
// video6: any;
// video7: any;
// video8: any;
// video9: any;
// video10: any;
// video11: any;
// video12: any;


// myaudio2: any = [];
// myaudio3: any = [];
// myaudio4: any = [];
// myaudio5: any = [];
// myaudio6: any = [];
// myaudio7: any = [];
// myaudio8: any = [];
// myaudio9: any = [];
// myaudio10: any = [];
// myaudio11: any = [];
// myaudio12: any;
// myaudio14: any;
// myaudio61: any;
// myaudio15: any;
// audiotable: any = [];
// myaudio13: any;
// myaudio16: any;
// myaudio17: any = [];
// myaudio17b: any;
// myaudio18: any;
// myaudio19: any;
// audiotablejsonconverted: any = [];

// jsonconvertedrows: any = [];
// searchresults: any = [];
// myaudio20: any;
// myaudio20src: any;
// myaudio20duration: any;

// searchresultslength: any;
// myaudio21: any;
// myaudio22: any;
// myaudio23: any;
// myaudio24: any;

// song: Media;

//retrieved thumbnail image generated by video editor plugin
// thumbnailretrieved: any;
// base64Image: string = '';
// secondimage: any;
// newimage: string;
// newimage2: string = '';

//takes the actual video or audio file from the phone
// VideoData: any;
audioData: any;
audiofileretrieved: any;

// private win: any = window;

// recordedaudioname: string; //store the name of the recorded audio
// recordedaudiopath: string; //store the path of the recorded audio
// myaudio: MediaObject; //the audio object that will create the audio file
// recording: boolean = false; //this will tell use whether we are recording a file or not
// storeplayingaudioposition: any; //this will store the position of the playing audio when we pause it so that we can resume from that position
// positioninput: any; //position of the paused audio will be sent to this textarea
// audioduration: any = null;  //save duration of the recorded audio
// interval: any; //we set an interval after which we get the duration of the audio because there's a slight delay after we play the audio for duration retrieval
// durationinput: any;  //duration of the recorded audio will be sent to this textarea


// extract: any;

// cameraData: string;

//for file picker and file opening processes
selectedfilename: any;
selectedfileextension: any;
selectedfilemimetype: any;
selectedfilepath: any;
selectedfilesize: any;


constructor(public navCtrl: NavController,
  public navParams: NavParams,
  public camera: Camera,
  private videoPlayer: VideoPlayer,
  private videoEditor: VideoEditor,
  private callNumber: CallNumber,
  private transfer: FileTransfer,
  private docPicker: DocumentPicker,
  private filePath: FilePath,
  private base64: Base64,
  private sanitizer: DomSanitizer,
  private iab: InAppBrowser,
  private toastCtrl: ToastController,
  private fileChooser: FileChooser,
  private document: DocumentViewer,
  public platform: Platform,
  public alertCtrl: AlertController,
  private chooser: Chooser,
  private fileOpener: FileOpener,
  private file: File,
  private streamingMedia: StreamingMedia,
  private media: Media,
  private mediaCapture: MediaCapture,
  private nativeAudio: NativeAudio,
  private storage: Storage) {

  // this.platform.ready().then(() => {
  //   console.log((<any>window).PDFViewer);
  // });

}

ionViewDidLoad() {
  // this.storage.get(MEDIA_FILES_KEY).then(res => {
  //   this.mediaFiles = JSON.parse(res) || [];
  // });
}


// captureAudio() {
//   this.mediaCapture.captureAudio().then(res => {
//     this.storeMediaFiles(res);
//   });
// }

// captureVideo() {
//   let options: CaptureVideoOptions = {
//     limit: 1,
//     duration: 30
//   }
//   this.mediaCapture.captureVideo(options).then((res: MediaFile[]) => {
//     let capturedFile = res[0];
//     console.log('myfile: ', capturedFile);

//     let fileName = capturedFile.name;
//     let dir = capturedFile['localURL'].split('/');
//     dir.pop();
//     let fromDirectory = dir.join('/');
//     let toDirectory = this.file.dataDirectory;

//     this.file.copyFile(fromDirectory, fileName, toDirectory, fileName).then(res => {
//       let url = res.nativeURL.replace(/^file:\/\//, '');
//       this.storeMediaFiles([{ name: fileName, size: capturedFile.size, localURL: url }])
//     });


//   });
// }

// play(myFile) {
//   console.log('play: ', myFile);
//   if (myFile.name.indexOf('.wav') > -1) {
//     const audioFile: MediaObject = this.media.create(myFile.localURL);
//     audioFile.play();
//   }
//   else {
//     let path = this.file.dataDirectory + myFile.name;
//     let url = path.replace(/^file:\/\//, '');
//     let video = this.myVideo.nativeElement;
//     video.src = url;
//     //video.play();

//     this.streamingMedia.playVideo(url);

//     // // Playing a video.
//     // this.videoPlayer.play(url).then(() => {
//     //   console.log('video completed');
//     // }).catch(err => {
//     //   console.log(err);
//     // });

//   }
// }

// storeMediaFiles(files) {
//   console.log('store: ', files);
//   this.storage.get(MEDIA_FILES_KEY).then(res => {
//     if (res) {
//       let arr = JSON.parse(res);
//       arr = arr.concat(files);
//       this.storage.set(MEDIA_FILES_KEY, JSON.stringify(arr));
//     }
//     else {
//       this.storage.set(MEDIA_FILES_KEY, JSON.stringify(files));
//     }
//     this.mediaFiles = this.mediaFiles.concat(files);
//   })
// }

// //call number
// callnumber() {
//   this.callNumber.callNumber('0501431980', true)
//     .then(res => console.log('Launched dialer!', res))
//     .catch(err => console.log('Error launching dialer', err));
// }

// audiorecord1() {
//   // Recording to a file
//   const file: MediaObject = this.media.create('path/to/file.mp3');
//   file.startRecord();
//   file.stopRecord();
// }

// audiorecord2() {
//   try {
//     // to listen to plugin events:
//     const file: MediaObject = this.media.create('file.mp3');

//     file.onStatusUpdate.subscribe(status => console.log(status)); // fires when file status changes

//     file.onSuccess.subscribe(() => console.log('Action is successful'));

//     file.onError.subscribe(error => console.log('Error!', error));

//     // play the file
//     file.play();

//     // pause the file
//     file.pause();

//     // get current playback position
//     file.getCurrentPosition().then((position) => {
//       console.log(position);
//     });

//     // get file duration
//     let duration = file.getDuration();
//     console.log(duration);

//     // skip to 10 seconds (expects int value in ms)
//     file.seekTo(10000);

//     // stop playing the file
//     file.stop();

//     // release the native audio resource
//     // Platform Quirks:
//     // iOS simply create a new instance and the old one will be overwritten
//     // Android you must call release() to destroy instances of media when you are done
//     file.release();
//   } catch (e) {
//     this.alertmsg(e)
//   }

// }

// openfiledirectory() {
//   this.file.checkDir(this.file.dataDirectory, 'mydir').then(_ =>
//     this.alertmsg("directory exists"))
//     .catch(err =>
//       this.alertmsg("directory doesnt exist")
//     );
// }

// // mediacaptureimage() {
// //   let options: CaptureImageOptions = { limit: 3 }
// //   this.mediaCapture.captureImage(options)
// //     .then(
// //       (data: MediaFile[]) => this.alertmsg(data),
// //       (err: CaptureError) => this.alertmsg(err)
// //     );
// // }


// //capture video using phone
// mediacapturevideo() {
//   let options: CaptureVideoOptions = { limit: 1 }
//   this.mediaCapture.captureVideo(options)
//     .then(
//       (data: MediaFile[]) => this.VideoData = data,
//       (err: CaptureError) => this.alertmsg(err)
//     );
// }

// // //play video captured
// // playcapturedvideo(){
// //   this.streamingMedia.playVideo(this.VideoData);
// // }

// //capture audio using phone
// mediacaptureaudio() {
//   let options: CaptureAudioOptions = { limit: 3 }
//   this.mediaCapture.captureAudio(options)
//     .then(
//       (data: MediaFile[]) => this.AudioData = data,
//       (err: CaptureError) => this.alertmsg(err)
//     );
// }

// // //play the audio captured
// // playcapturedaudio(){
// //   this.streamingMedia.playAudio(this.AudioData);
// // }

// // //pause the audio playing
// // pauseplayingaudio(){
// //   this.streamingMedia.pauseAudio();
// // }

// // //stop the audio playing
// // stopplayingaudio(){
// //   this.streamingMedia.stopAudio();
// // }

// // //resume the audio playing
// // resumeplayingaudio(){
// //   this.streamingMedia.resumeAudio();
// // }



// startrecording() {
//   let options: CaptureVideoOptions = { limit: 3 }
//   this.mediaCapture.captureVideo(options)
//     .then(
//       (data: MediaFile[]) => JSON.stringify(data),
//       (err: CaptureError) => this.alertmsg(err),
//     );
// }

//capture video using phone
// mediacapturevideo() {
//   let options: CaptureVideoOptions = { limit: 1 }

//   this.mediaCapture.captureVideo(options)
//     .then(
//       (data: MediaFile[]) => {
//         this.VideoData = data;
//         console.log("vid data 1", data);
//         this.VideoData = JSON.stringify(data);
//         this.VideoData = JSON.parse(this.VideoData);
//         console.log("video data", this.VideoData);
//         //good up to this point

//         // this.video1 = JSON.stringify(this.VideoData);
//         // // this.video2 = JSON.parse(this.VideoData);
//         // this.video3 = JSON.stringify(this.video1);
//         // this.video4 = JSON.parse(this.video1);
//         // // this.video5 = JSON.stringify(this.video2);
//         // // this.video6= JSON.parse(this.video2);
//         // // this.video7 = this.video2['fullPath'];
//         // this.video8 = this.video3['fullPath'];
//         // this.video9 = this.video4['fullPath'];
//         // // this.video10 = this.video5['fullPath'];
//         // // this.video11 = this.video6['fullPath'];
//         // this.video12 = this.video1['fullPath'];

//         // console.log("video1", this.video1);
//         // console.log("video2", this.video2);
//         // console.log("video3", this.video3);
//         // console.log("video4", this.video4);
//         // console.log("video5", this.video5);
//         // console.log("video6", this.video6);
//         // console.log("video7", this.video7);
//         // console.log("video8", this.video8);
//         // console.log("video9", this.video9);
//         // console.log("video10", this.video10);
//         // console.log("video11", this.video11);
//         // console.log("video13", this.video12);

//         // this.video1.map((x) => {
//         //   console.log("mapping", x.fullPath);
//         // })

//         // for (let key in this.video1) {
//         //   // console.log(key + " => " + this.video1[key]);
//         //   console.log(" => " + this.video1[key].fullPath);
//         //   console.log(" => 2" ,this.video1[key].fullPath);
//         // }


//         // console.log("parsed", JSON.parse(this.VideoData));


//         /******these gave me the correct values of the video file*/
//         for (var key in this.VideoData) {
//           console.log("all files", this.VideoData[key]);
//           console.log("full path", this.VideoData[key].fullPath);
//         }

//         for (var count = 0; count < this.VideoData.length; count++) {
//           console.log("full path", this.VideoData[count].fullPath)
//         }
//         /******these gave me the correct values of the video file*/


//         const confirm = this.alertCtrl.create({
//           title: '',
//           message: 'Send video?',
//           buttons: [
//             {
//               text: 'Yes',
//               handler: () => {
//                 console.log("send video to database")
//                 console.log("vid data 2", data);
//               }
//             },
//             {
//               text: 'Cancel',
//               handler: () => {
//                 console.log('Cancel clicked');
//               }
//             }
//           ]
//         });
//         confirm.present();

//       }, (err: CaptureError) => {
//         console.log(JSON.stringify(err));
//         this.alertmsg(JSON.stringify(err));
//       }
//     );
// }



// openCamera() {   /***************************************************************************3 */
//   const options: CameraOptions = {
//     quality: 100, //quality of pic is reduced from 100 to 50 to allow small base64 code to be sent to api
//     // targetWidth: 320,
//     // targetHeight: 200, //size to scale image to
//     sourceType: this.camera.PictureSourceType.CAMERA,
//     destinationType: this.camera.DestinationType.DATA_URL,
//     // encodingType: this.camera.EncodingType.JPEG,
//     mediaType: this.camera.MediaType.VIDEO,
//     saveToPhotoAlbum: true,
//     // allowEdit: true,
//     correctOrientation: true
//   }

//   this.camera.getPicture(options).then((videodata) => {
//     console.log("camera's video data", videodata);
//   }, (err) => {
//     // Handle error
//     this.alertmsg(err);
//   });
// }



// selectvideo() {
//   var CameraOptions = {
//     sourceType: this.camera.PictureSourceType.SAVEDPHOTOALBUM,
//     mediaType: this.camera.MediaType.VIDEO
//   };

//   this.camera.getPicture(CameraOptions).then((data) => {

//     /**playing video with streamingmedia plugin */
//     this.streamingMedia.playVideo(data);

//     console.log("video data", data);

//     const confirm = this.alertCtrl.create({
//       title: '',
//       message: 'Send video?',
//       buttons: [
//         {
//           text: 'Yes',
//           handler: () => {
//             this.generatevideothumbnail(data);  //generate thumbnail for video
//             console.log("generate video thumbnail");
//             console.log("send video to database");
//           }
//         },
//         {
//           text: 'Cancel',
//           handler: () => {
//             console.log('Cancel clicked');
//           }
//         }
//       ]
//     });
//     confirm.present();



//     /**playing video with native video player plugin */
//     // this.videoPlayer.play(data).then(() => {
//     //   console.log('video completed');
//     // }).catch(err => {
//     //   console.log(err);
//     // });
//   }, (err) => {
//     this.alertmsg(err);
//     console.log(err);
//   })
// }

//generate thumbnail from video
// generatevideothumbnail(videofile) {
//   const options: CreateThumbnailOptions = {
//     atTime: 3,
//     height: 1024,
//     width: 1024,
//     quality: 100,
//     fileUri: videofile, // looks something like this : http://example.com/filename.mp4
//     outputFileName: videofile.substring(videofile.lastIndexOf('/') + 1)
//   };

//   this.videoEditor.createThumbnail(options).then((thumbnailfile) => {
//     console.log("thumbnail image", thumbnailfile);

//     this.thumbnailretrieved = thumbnailfile;

//     // this.base64Image = 'data:image/jpeg;base64,' + thumbnailfile; //image selected is stored into this.bas64Image
//     // this.thumbnailretrieved = this.sanitizer.bypassSecurityTrustResourceUrl(this.base64Image);
//     // this.secondimage = this.sanitizer.sanitize(SecurityContext.URL, 'data:image/jpeg;base64,${thumbnailfile}');
//     // this.newimage = this.sanitizer.sanitize(SecurityContext.URL, this.base64Image);

//   }, (err) => {
//     this.alertmsg(err);
//     console.log(err);
//   });
// }


// public playVideo() {
//   this.videoOpts = { volume: 1.0 };
//   this.videoPlayer.play('file:///android_asset/www/movie.mp4').then(() => {
//     console.log('video completed');
//   }).catch(err => {
//     console.log(err);
//   });
// }
// public stopPlayingVideo() {
//   this.videoPlayer.close();
// }


// /********************revoulution*************************************** */
// getAudioList() {
//   if (localStorage.getItem("audiolist")) {
//     this.audioList = JSON.parse(localStorage.getItem("audiolist"));
//     console.log(this.audioList);
//   }
// }

// ionViewWillEnter() {
//   this.getAudioList();
// }


// startRecord() {
//   if (this.platform.is('ios')) {
//     this.fileName = 'record' + new Date().getDate() + new Date().getMonth() + new Date().getFullYear() + new Date().getHours() + new Date().getMinutes() + new Date().getSeconds() + '.3gp';
//     this.filePath = this.file.documentsDirectory.replace(/file:\/\//g, '') + this.fileName;
//     this.audio = this.media.create(this.filePath);
//   } else if (this.platform.is('android')) {
//     this.fileName = 'record' + new Date().getDate() + new Date().getMonth() + new Date().getFullYear() + new Date().getHours() + new Date().getMinutes() + new Date().getSeconds() + '.3gp';
//     this.filePath = this.file.externalDataDirectory.replace(/file:\/\//g, '') + this.fileName;
//     this.audio = this.media.create(this.filePath);
//   }
//   this.audio.startRecord();
//   this.recording = true;
// }



// stopRecord() {
//   this.audio.stopRecord();
//   let data = { filename: this.fileName };
//   this.audioList.push(data);
//   localStorage.setItem("audiolist", JSON.stringify(this.audioList));
//   this.recording = false;
//   this.getAudioList();
// }


// playAudio(file, idx) {
//   if (this.platform.is('ios')) {
//     this.filePath = this.file.documentsDirectory.replace(/file:\/\//g, '') + file;
//     this.audio = this.media.create(this.filePath);
//   } else if (this.platform.is('android')) {
//     this.filePath = this.file.externalDataDirectory.replace(/file:\/\//g, '') + file;
//     this.audio = this.media.create(this.filePath);
//   }
//   this.audio.play();
//   this.audio.setVolume(0.8);
// }
// /********************revoulution*************************************** */

// pauseAudio(file, idx) {
//   if (this.platform.is('ios')) {
//     this.filePath = this.file.documentsDirectory.replace(/file:\/\//g, '') + file;
//     this.audio = this.media.create(this.filePath);
//   } else if (this.platform.is('android')) {
//     this.filePath = this.file.externalDataDirectory.replace(/file:\/\//g, '') + file;
//     this.audio = this.media.create(this.filePath);
//   }
//   this.audio.pause();
// }



// //internet connection error
// alertmsg(msg) {
//   const alert = this.alertCtrl.create({
//     title: 'alert!',
//     subTitle: msg,
//     buttons: ['OK']
//   });
//   alert.present();
// }


// CreateVideo() {
//   var nItem = localStorage.getItem('videoNum');
//   var numstr = 0;
//   if (nItem == null) {
//     numstr = 1;
//   }
//   else {
//     var numstr = parseInt(nItem, 10);
//     numstr = numstr + 1;
//   }

//   let videooption: CaptureVideoOptions = { limit: 1 };

//   this.mediaCapture.captureVideo().then((videoData: Array<MediaFile>) => {

//     let filedir = this.file.dataDirectory;

//     var path = videoData[0].fullPath.replace('/private', 'file://');
//     var ind = (path.lastIndexOf('/') + 1);
//     var orgFilename = path.substring(ind);
//     var orgFilePath = path.substring(0, ind);

//     console.log("videopath", path);
//     //SAVE FILE
//     this.file.copyFile(orgFilePath, orgFilename, filedir + 'recordvideo', 'sample' + numstr + '.mov').then(() => {
//       var option: CreateThumbnailOptions = { fileUri: filedir + 'recordvideo/sample' + numstr + '.mov', width: 160, height: 206, atTime: 1, outputFileName: 'sample' + numstr, quality: 50 };
//       this.videoEditor.createThumbnail(option).then(result => {
//         //result-path of thumbnail
//         localStorage.setItem('videoNum', numstr.toString());
//       }).catch(e => {
//         // alert('fail video editor');
//       });
//     });

//   });
// }


/*********************************meeeeeeeeeeeeeeeeeeeeeeeeeeeeeee********** */

//record the audio 
// recordaudio() {
//   if (this.platform.is('ios')) {
//     this.recordedaudioname = 'record' + new Date().getDate() + new Date().getMonth() + new Date().getFullYear() + new Date().getHours() + new Date().getMinutes() + new Date().getSeconds() + '.wav';
//     this.recordedaudiopath = this.file.documentsDirectory.replace(/file:\/\//g, '') + this.recordedaudioname;
//     this.myaudio = this.media.create(this.recordedaudiopath);
//   } else if (this.platform.is('android')) {
//     this.recordedaudioname = 'record' + new Date().getDate() + new Date().getMonth() + new Date().getFullYear() + new Date().getHours() + new Date().getMinutes() + new Date().getSeconds() + '.mp3';
//     this.recordedaudiopath = this.file.externalDataDirectory.replace(/file:\/\//g, '') + this.recordedaudioname;
//     this.myaudio = this.media.create(this.recordedaudiopath);
//   }
//   this.myaudio.startRecord();
//   this.recording = true;
//   this.audioduration = this.myaudio.getDuration();
// }


//end recording of audio
// stoprecordingaudio() {
//   this.myaudio.stopRecord();
//   this.recording = false;


//   // this.myaudio2 = JSON.stringify(this.myaudio);
//   // this.myaudio3 = JSON.parse(this.myaudio2);

//   // this.myaudio14 = JSON.stringify(this.myaudio3);

//   // this.myaudio15 = JSON.parse(this.myaudio14);


//   // this.myaudio13 = JSON.stringify(this.myaudio2);
//   // this.myaudio10 = JSON.stringify((this.myaudio2['onSuccess']));
//   // this.myaudio11 = JSON.stringify((this.myaudio2['id']));
//   // this.myaudio4 = JSON.stringify((this.myaudio3['onSuccess']));
//   // this.myaudio12 = JSON.stringify((this.myaudio3['_objectInstance']));
//   // this.myaudio6 = JSON.parse(this.myaudio4);
//   // this.myaudio61 = JSON.stringify(this.myaudio6);
//   // this.myaudio7 = JSON.stringify(this.myaudio4);
//   // this.myaudio8 = JSON.stringify((this.myaudio6['onSuccess']));
//   // this.myaudio9 = JSON.stringify((this.myaudio7['onSuccess']));
//   // this.myaudio18 = JSON.stringify((this.myaudio12['id']));

//   // this.audiotablejsonconverted = JSON.parse(this.myaudio2);
//   // for (let count of this.audiotablejsonconverted) {
//   //   this.audiotable.push(count);
//   // }

//   // for (var key in this.audiotable) {
//   //   if (this.audiotable.hasOwnProperty(key)) {
//   //     this.myaudio5 = this.audiotable[key].onSuccess
//   //   }
//   // }

//   // for (var key in this.myaudio12) {
//   //   if (this.myaudio12.hasOwnProperty(key)) {
//   //     this.myaudio5 = JSON.stringify(this.myaudio12[key].id)
//   //   }
//   // }

//   // this.myaudio14 = this.myaudio12.id;

//   // for (var count = 0; count < this.myaudio12.length; count++) {
//   //   this.myaudio15 = JSON.stringify(this.myaudio12[count].id);
//   // }

//   // this.myaudio16 = JSON.stringify(this.myaudio12.id);

//   // this.myaudio17 = this.myaudio12.id;

//   // this.myaudio17b = JSON.parse(this.myaudio12);

//   // this.myaudio12.map(res => res.json())
//   //   .subscribe(data => {
//   //     this.myaudio19 = (data[0].id);
//   //   });


//   // this.jsonconvertedrows = this.myaudio12;
//   // for (let count of this.jsonconvertedrows) {
//   //   this.searchresults.push(count);
//   // }

//   // for (var key in this.searchresults) {
//   //   if (this.searchresults.hasOwnProperty(key)) {
//   //     this.myaudio20 = this.searchresults[key].id;
//   //     this.myaudio20src = this.searchresults[key].src;
//   //     this.myaudio20duration = this.searchresults[key]._duration;
//   //   }
//   // }

//   // this.searchresultslength = this.searchresults.length;

//   // for (var count = 0; count < this.searchresults.length; count++) {
//   //   this.myaudio20 = this.searchresults[count].id;
//   //   this.myaudio20src = this.searchresults[count].src;
//   //   this.myaudio20duration = this.searchresults[count]._duration;
//   // }

//   // this.myaudio21 = JSON.stringify(this.myaudio12);
//   // this.myaudio22 = this.myaudio21['id'];
//   // this.myaudio23 = this.myaudio21("id");
//   // this.myaudio24 = this.myaudio21('id');


//   // this.somedata = this.myaudio17b['src'];

//   this.myaudio.setVolume(0.0);
//   this.myaudio.play();
//   this.interval = setInterval(() => {
//     if (this.audioduration == -1) {
//       this.audioduration = this.myaudio.getDuration();
//     } else {
//       this.myaudio.stop();
//       this.myaudio.setVolume(1.0);
//       clearInterval(this.interval);
//     }

//     //retrieve duration of the audio and rounding off to nearest whole number
//     //before sending into our textarea
//     this.audioduration = Math.round(this.audioduration);

//     /**if duration is less than 60 we assign "sec"
//      * if duration is greater than 60 we assign min
//      */
//     if (this.audioduration > 60) {
//       // this.durationinput  = (Math.ceil(this.audioduration/60)+ " min(s)");

//       Math.ceil(this.audioduration / 60);

//       if (Math.ceil(this.audioduration / 60) < 2) {
//         this.durationinput = (Math.ceil(this.audioduration / 60) + " min");
//       }
//       else {
//         this.durationinput = (Math.ceil(this.audioduration / 60) + " mins");
//       }

//     }

//     else {
//       this.durationinput = this.audioduration + " sec"
//     }


//   }, 10);

//   this.myaudio2 = JSON.stringify(this.myaudio);
//   this.myaudio3 = JSON.parse(this.myaudio2);
//   this.myaudio12 = JSON.stringify((this.myaudio3['_objectInstance']));
//   this.myaudio17b = JSON.parse(this.myaudio12);
// }

//play the recorded audio
// playrecordedaudio(file) {
//   if (this.platform.is('ios')) {
//     this.recordedaudiopath = this.file.documentsDirectory.replace(/file:\/\//g, '') + file;
//     this.myaudio = this.media.create(this.recordedaudiopath);
//   } else if (this.platform.is('android')) {
//     this.recordedaudiopath = this.file.externalDataDirectory.replace(/file:\/\//g, '') + file;
//     this.myaudio = this.media.create(this.recordedaudiopath);
//   }
//   this.myaudio.play();
//   this.myaudio.setVolume(1.0);
// }


//pause playing of the recorded audio
// pauserecordedaudio() {

//   //before it pauses we get the position of the audio
//   this.myaudio.getCurrentPosition().then((position) => {

//     //retrieve position of the paused video into our textarea
//     this.positioninput = position + " sec";

//     //then we pause it 
//     this.myaudio.pause();
//   });

// }

//resume playing of the recorded audio
// resumerecordedaudio() {
//   this.myaudio.play();

//   // // SeekTo to 10 seconds after 5 seconds
//   // //ie. move play to what is at second 10 and continue from there
//   // setTimeout(() => {
//   //   this.myaudio.seekTo(10000)
//   // }, 5000);
// }

//stop playing of the recorded audio
// stoprecordedaudio() {
//   this.myaudio.stop();
// }





/****************file upload codes*************** */
//upload a file
// uploadfile() {
//   this.fileChooser.open().then((uri) => {
//     this.filePath.resolveNativePath(uri).then(
//       (nativepath) => {
//         this.fileTransfer = this.transfer.create();
//         let options: FileUploadOptions = {
//           fileKey: 'file',
//           fileName: 'fileName',
//           chunkedMode: false,
//           headers: {},
//           mimeType: 'multipart/form-data'
//         }
//         this.Toastvalidation("uploading...");
//         this.fileTransfer.upload(nativepath, 'http://www.camfilaknust.com/', options).then((data) => {
//           this.alertmsg("transfer done = " + JSON.stringify(data));
//           this.Toastvalidation("...");
//         }, (err) => {
//           this.Toastvalidation("1")
//           this.alertmsg(JSON.stringify(err));
//         })

//       }, (err) => {
//         this.Toastvalidation("2")
//         this.alertmsg(JSON.stringify(err));
//       })
//   }, (err) => {
//     this.Toastvalidation("3")
//     this.alertmsg(JSON.stringify(err));
//   })
// }


/***this worked */
selectFile() {
  if (this.platform.is('android')) {
    this.fileChooser.open()
      .then(
        uri => {
          this.filePath.resolveNativePath(uri)
            .then(url => {

              // url is path of selected file
              console.log("file path: ", url);
              this.selectedfilepath = url;

              var fileName = url.substring(url.lastIndexOf("/") + 1)
              // fileName is selected file's name
              console.log("file name: ", fileName)
              this.selectedfilename = fileName;

            })
            .catch(err => console.log(err));
        }
      )
      .catch(error => {
        console.log(error)
      });
  } else {

    //use getFile('all') if u want to select all file types
    this.docPicker.getFile('pdf')
      .then(uri => {

        //uri is the path of the selected file
        console.log("file path: ", uri)
        this.selectedfilepath = uri;

        var fileName = uri.substring(uri.lastIndexOf("/") + 1)
        //fileName is the selected file's name
        console.log("file name: ", fileName);
        this.selectedfilename = fileName;

      })
      .catch(e => console.log(e));
  }
}





/***this worked */

viewfileextensionandmimetype() {

  //retrive the extension of a file   eg. .mp3, .mp4, .xlsx, .ppt, .pptx, etc
  let fileExtn = this.selectedfilename.split('.').reverse()[0];
  this.selectedfileextension = fileExtn;

  console.log("selected file's extension", this.selectedfileextension);

  //assign mime type to the extension using our mime types table in the getMIMEtype function
  let fileMIMEType = this.getMIMEtype(this.selectedfileextension);
  this.selectedfilemimetype = fileMIMEType;

  console.log("selected file's mime type", this.selectedfilemimetype);

}




/***this worked */
//retrieve the mime type of a file eg. 'image/jpeg', 'text/plain', 'application/pdf'
getMIMEtype(extn) {
  let ext = extn.toLowerCase();
  let MIMETypes = {

    //text file
    'txt': 'text/plain',
    'html': 'text/html',
    'htm': 'text/html',
    'css': 'text/css',
    'vcf': 'text/x-vcard',

    //office document files
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'doc': 'application/msword',
    'xls': 'application/vnd.ms-excel',
    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'rtf': 'application/rtf',
    'ppt': 'application/vnd.ms-powerpoint',
    'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',

    //pdf files
    'pdf': 'application/pdf',

    //image files
    'jpg': 'image/jpeg',
    'jpeg': 'image/jpeg',
    'bmp': 'image/bmp',
    'png': 'image/png',
    'gif': 'image/gif',
    'ico': 'image/x-icon',
    'tif': 'image/tiff',
    'tiff': 'image/tiff',

    //mime for audio files
    'mp3': 'audio/mpeg',
    'm3u': 'audio/x-mpegurl',
    'wav': 'audio/x-wav',

    //zip files
    'tgz': 'application/x-compressed',
    'zip': 'application/zip',

    //video files
    'swf': 'application/x-shockwave-flash',
    'mp4': 'video/mp4',
    'avi': 'video/x-msvideo',
    'movie': 'video/x-sgi-movie',
    'mov': 'video/quicktime',
    'flv': 'video/x-flv',
    'ts': 'video/MP2T',
    '3gp': 'video/3gpp',
    'wmv': 'video/x-ms-wmv',
  }
  return MIMETypes[ext];
}




/***this worked */
//open file selected with default application
openselectedFile() {
  this.fileOpener.open(this.selectedfilepath, this.selectedfilemimetype)
    .then(() => {
      console.log('File is opened');
    })
    .catch(e => {
      console.log('Error openening file', e)
    });
}



/***this worked */
//open .pdf with document viewer
openpdffile() {
  const options: DocumentViewerOptions = {
    title: 'My PDF',

    //allow searching of text in pdf
    search: {
      enabled: true
    },
    email: {
      enabled: true
    },
    print: {
      enabled: true
    },

  }
  this.document.viewDocument(this.selectedfilepath, 'application/pdf', options)
}




/***this worked */
//open office files with document viewer
openofficefile() {
  const options: DocumentViewerOptions = {
    title: 'My PDF',

    //allow searching of text in pdf
    search: {
      enabled: true
    },
    email: {
      enabled: true
    },
    print: {
      enabled: true
    },

  }
  this.document.viewDocument(this.selectedfilepath, this.selectedfilemimetype, options)
}


inappbrowser() {
  let url = encodeURIComponent(this.selectedfilepath);
  console.log("encodeduricomponent: ", url);
  this.iab.create('https://docs.google.com/viewer?url=' + url);
}


/***this worked */
//view selected file's size
viewselectedfilesize() {

  this.file.resolveLocalFilesystemUrl(this.selectedfilepath).then((fileEntry: any) => {
    fileEntry.getMetadata((metadata) => {

      //the size returned from metadata is in bytes
      this.selectedfilesize = metadata.size;

      //now we convert to kb , mb or gb
      if (this.selectedfilesize < 1024) {
        this.selectedfilesize = this.selectedfilesize + " Bytes";
      }

      else if (this.selectedfilesize < 1048576) {
        this.selectedfilesize = (this.selectedfilesize / 1024).toFixed(1) + " KB"; //toFixed is the number of decimal points u want

        // this.selectedfilesize = parseInt(this.selectedfilesize); //convert from string to number
        // this.selectedfilesize = Math.ceil(this.selectedfilesize); //round to nearest whole number
        // this.selectedfilesize = this.selectedfilesize.toString() + "KB" //convert back to string and add size name
      }

      else if (this.selectedfilesize < 1073741824) {
        this.selectedfilesize = (this.selectedfilesize / 1048576).toFixed(1) + " MB"; //toFixed is the number of decimal points u want

        // this.selectedfilesize = parseInt(this.selectedfilesize); //convert from string to number
        // this.selectedfilesize = Math.ceil(this.selectedfilesize); //round to nearest whole number
        // this.selectedfilesize = this.selectedfilesize.toString() + "MB" //convert back to string and add size name
      }

      else {
        this.selectedfilesize = (this.selectedfilesize / 1073741824).toFixed(1) + " GB"; //toFixed is the number of decimal points u want

        // this.selectedfilesize = parseInt(this.selectedfilesize); //convert from string to number
        // this.selectedfilesize = Math.ceil(this.selectedfilesize); //round to nearest whole number
        // this.selectedfilesize = this.selectedfilesize.toString() + "GB" //convert back to string and add size name
      }

      console.log("selected file size in bytes", this.selectedfilesize);//metadata.size is the size in bytes     
    });
  });
}


//record audio with media capture
mediacaptureaudiorecorder() {
  let options: CaptureAudioOptions = { limit: 1 }
  this.mediaCapture.captureAudio(options)
    .then((data: MediaFile[]) => {

      this.audioData = data;
      console.log("media captured audio data: ", this.audioData);

      //sorting the array in the returned data to retrieve our audio file
      this.audioData = JSON.stringify(data);
      this.audioData = JSON.parse(this.audioData)

      //finally we can retrieve our audio file with
      for (var key in this.audioData) {
        this.audiofileretrieved = this.audioData[key].fullPath;
      }

      console.log("media captured audio path", this.audiofileretrieved);

    })
    .catch((err: CaptureError) => {
      console.log(err);
    });
}

// //play media captured audio with streaming media plugin
// playmediacapturedaudio1() {
//   this.streamingMedia.playAudio(this.audiofileretrieved);
// }


//get the duration of the media captured audio
mediacapturedaudioduration() {
  this.audiofileretrieved = this.media.create(this.audiofileretrieved);
  this.audiofileretrieved.setVolume(0.0)
  this.audiofileretrieved.play();

  setTimeout(() => {

    this.audiofileretrieved.setVolume(0.0);

    var dur: any = this.audiofileretrieved.getDuration()

    /**if duration is less than 60 we assign "sec"
    * if duration is greater than 60 we assign min */
    if (dur > 60) {

      Math.ceil(dur / 60);

      if (Math.ceil(dur / 60) < 2) {
        dur = (Math.ceil(dur / 60).toFixed(0) + " min");
      }
      else {
        dur = (Math.ceil(dur / 60).toFixed(0) + " mins");
      }

    }

    else {
      dur = dur.toFixed(0) + " sec"
    }
    console.log("new dur: ", dur);
  }, 100);

}


//play media captured audio with media plugin
playmediacapturedaudio2() {
  this.audiofileretrieved.setVolume(1.0);
  this.audiofileretrieved.play();
}


// generatevideothumbnail(videofile) {
//   const options: CreateThumbnailOptions = {
//     atTime: 3,
//     height: 1024,
//     width: 1024,
//     quality: 100,
//     fileUri: videofile, // looks something like this : http://example.com/filename.mp4
//     outputFileName: videofile.substring(videofile.lastIndexOf('/') + 1)
//   };

//   this.videoEditor.createThumbnail(options).then((thumbnailfile) => {

//     this.thumbnailretrieved = 'file://' + thumbnailfile;
//     // this.thumbnailretrieved = 'cdvfile:/' + thumbnailfile;   //also should work

//     var fileName = this.thumbnailretrieved.substring(this.thumbnailretrieved.lastIndexOf("/") + 1)
//     console.log("thumbnail name: ", fileName);

//     console.log("thumbnail path: ", this.thumbnailretrieved);

//     this.newimage = this.thumbnailretrieved;

//     //this.newimage= this.webview.convertFileSrc(this.newimage);
//     this.newimage = this.win.Ionic.WebView.convertFileSrc(this.newimage); //worked

//     // this.newimage = normalizeURL(this.thumbnailretrieved);

//     // console.log("normalized thumbnail path: ", this.newimage);

//     // this.newimage = this.newimage.replace(/^file:\/\//, '');

//     // this.base64Image = 'data:image/jpeg;base64,' + thumbnailfile; //image selected is stored into this.bas64Image
//     // this.thumbnailretrieved = this.sanitizer.bypassSecurityTrustResourceUrl(this.base64Image);
//     // this.secondimage = this.sanitizer.sanitize(SecurityContext.URL, 'data:image/jpeg;base64,${thumbnailfile}');
//     // this.newimage = this.sanitizer.sanitize(SecurityContext.URL, this.base64Image);

//     //converting image to base64 string

//     JSON.stringify(this.thumbnailretrieved);
//     console.log("stringified thumbnail retreived", this.thumbnailretrieved);

//     this.convertToDataURLviaCanvas2(this.newimage, "image/jpeg")
//       .then(base64Img => {
//         //do whatever you need here, with the base64 data
//         console.log("converted image string", base64Img);
//       })

//     this.method3(this.thumbnailretrieved);

//     //this worked
//     this.method4(this.thumbnailretrieved);

//   }, (err) => {
//     this.alertmsg(err);
//     console.log(err);
//   });
// }


// convertToDataURLviaCanvas(url, outputFormat) {
//   return new Promise((resolve, reject) => {
//     let img = new Image();
//     img.crossOrigin = 'Anonymous';
//     img.onload = function () {
//       let canvas = <HTMLCanvasElement>document.createElement('CANVAS'),
//         ctx = canvas.getContext('2d'),
//         dataURL;
//       canvas.height = this.height;
//       canvas.width = this.width;
//       ctx.drawImage(this, 0, 0);
//       dataURL = canvas.toDataURL(outputFormat);
//       //callback(dataURL);
//       canvas = null;
//       resolve(dataURL);
//     };
//     img.src = url;
//   });
// }


// convertToDataURLviaCanvas2(url, outputFormat) {
//   return new Promise((resolve, reject) => {
//     let img = new Image();
//     img.crossOrigin = 'Anonymous';
//     img.onload = function () {
//       let canvas = <HTMLCanvasElement>document.createElement('CANVAS'),
//         ctx = canvas.getContext('2d'),
//         dataURL;
//       canvas.height = img.height;
//       canvas.width = img.width;
//       ctx.drawImage(img, 0, 0);
//       dataURL = canvas.toDataURL(outputFormat);
//       resolve(dataURL);
//       canvas = null;
//     };
//     img.src = url;
//   });
// }


// method2(){
//   const options: CameraOptions = {
//     quality: 100,
//     destinationType: this.camera.DestinationType.FILE_URI,
//     encodingType: this.camera.EncodingType.JPEG,
//     mediaType: this.camera.MediaType.PICTURE
//   }

//   this.camera.getPicture(options).then((imageData) => {
//    // imageData is either a base64 encoded string or a file URI
//    // If it's base64 (DATA_URL):
//    let base64Image = 'data:image/jpeg;base64,' + imageData;
//   }, (err) => {
//    // Handle error
//   });
// }

// method3(image) {
//   const options: CameraOptions = {
//     quality: 100,
//     sourceType: image,
//     destinationType: this.camera.DestinationType.DATA_URL,
//     encodingType: this.camera.EncodingType.JPEG,
//     mediaType: this.camera.MediaType.PICTURE,
//     saveToPhotoAlbum: true,
//     allowEdit: true,
//     correctOrientation: true
//   }

//   this.camera.getPicture(options).then((imageData) => {
//     // imageData is either a base64 encoded string or a file URI

//     // If it's base64 (DATA_URL):
//     this.cameraData = imageData;
//     this.base64Image = 'data:image/jpeg;base64,' + imageData; //image selected is stored into this.bas64Image

//     console.log("using camera plugin: ", this.cameraData);
//   }, (err) => {
//     // Handle error
//     console.log("camera data error", err);
//   });
// }

// method4(filePath) {
//   this.base64.encodeFile(filePath).then((base64File: string) => {
//     //remove some characters at the beginning of the base64file string
//     base64File = base64File.replace('data:image/*;charset=utf-8;base64,', '')

//     console.log("base64 converter data", base64File);
//   }, (err) => {
//     console.log("base64 converter error",err);
//   });
// }


//generate thumbnail from video
// generatevideothumbnail(videofile) {
//   const options: CreateThumbnailOptions = {
//     atTime: 1,
//     height: 1024,
//     width: 1024,
//     quality: 100,
//     fileUri: videofile, // looks something like this : http://example.com/filename.mp4
//     outputFileName: videofile.substring(videofile.lastIndexOf('/') + 1)
//   };

//   this.videoEditor.createThumbnail(options).then((thumbnailfile) => {
//     console.log("thumbnail image", thumbnailfile);
//     this.thumbnailfromvideo = thumbnailfile;

//   }, (err) => {
//     this.alertmsg(err);
//     console.log(err);
//   });
// }



/**this worked */
// thumbnailfilepath() {
//   this.filePath.resolveNativePath(this.thumbnailretrieved)
//     .then(url => {

//       // url is path of selected file
//       console.log("thumbnail path: ", url);

//       var fileName = url.substring(url.lastIndexOf("/") + 1)
//       // fileName is selected file's name
//       console.log("thumbnail name: ", fileName)

//     })
//     .catch(err => console.log(err));
// }

// uploadfile2() {

//   // this.fileTransfer.upload('/assets/css/animate.min', 'http://localhost/camfilaapi/uploadedfile/').then((data) => {
//   //   this.alertmsg("transfer done = " + JSON.stringify(data));
//   //   this.Toastvalidation("...");
//   // }, (err) => {
//   //   this.alertmsg(err);
//   // })


//   //   let options: FileUploadOptions = {
//   //     fileKey: 'file',
//   //     fileName: 'name.jpg',
//   //     headers: {}
//   //  }
//   //  this.fileTransfer.upload('http://localhost/camfilaapi/composer.json', 'http://localhost/camfilaapi/uploadedfile/', options)
//   //   .then((data) => {
//   //     // success
//   //     this.Toastvalidation("success");
//   //   }, (err) => {
//   //     // error
//   //     this.alertmsg(err);
//   //   })

//   const fileTransfer: FileTransferObject = this.transfer.create();

//   let options: FileUploadOptions = {
//     fileKey: 'file',
//     fileName: 'name.jpg',
//     headers: {}
//   }

//   fileTransfer.upload('/assets/css/animate.min', 'http://www.camfilaknust.com/messagemedia/', options)
//     .then((data) => {
//       // success
//       this.Toastvalidation("success");
//     }, (err) => {
//       // error
//       this.alertmsg(JSON.stringify(err))
//     })
// }


// specificfiletypechooser() {
//   this.chooser.getFile('application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,image/gif,video/*,text/*')
//     .then(file => {
//       console.log(file ? file.name : 'canceled')
//       console.log("selected file name: ", file.name);
//       console.log("selected file path: ", file);
//     })
//     .catch((error: any) => {
//       console.error(error)
//     });
// }


//toast for validation
Toastvalidation(msg) {
  const toast = this.toastCtrl.create({
    message: msg,
    duration: 2000,
    position: 'top'
  });
  toast.present();
}

//alert message
alertmsg(msg) {
  const alert = this.alertCtrl.create({
    title: 'alert!',
    subTitle: msg,
    buttons: ['OK']
  });
  alert.present();
}


// showarray() {
//   this.myarray = {
//     "id": "12eabd38-a2b0-4a13-4732-e088998f7d21",
//     "src": "/storage/emulated/0/Android/data/io.ionic.starter/files/record114201920351.mp3",
//     "_duration": -1,
//     "_position": -1
//   }

//   // console.log(this.myarray)

//   // console.log(this.myarray.src);

//   // console.log(this.myarray.id);

//   // console.log(this.myarray._duration);

//   // this.Toastvalidation(this.myaudio12._duration);

//   console.log("audio 1", this.myaudio)
//   console.log("audio 2", this.myaudio2)
//   console.log("audio 3", this.myaudio3)
//   console.log("audio 4", this.myaudio4)
//   console.log("audio 5", this.myaudio5)
//   console.log("audio 6", this.myaudio5)
//   console.log("audio 61", this.myaudio6)
//   console.log("audio 7", this.myaudio7)
//   console.log("audio 8", this.myaudio8)
//   console.log("audio 9", this.myaudio9)
//   console.log("audio 10", this.myaudio10)
//   console.log("audio 11", this.myaudio11)
//   console.log("audio 12", this.myaudio12)
//   console.log("audio 13", this.myaudio13)
//   console.log("audio 14", this.myaudio14)
//   console.log("audio 15", this.myaudio15)
//   console.log("audio 16", this.myaudio16)
//   console.log("audio 17", this.myaudio17)
//   console.log("audio 17b", this.myaudio17b)
//   console.log("audio 17b id", this.myaudio17b['id']);
//   // console.log("audio 17b id2",JSON.parse(this.myaudio17b["id"]));
//   console.log("audio 17b src", this.myaudio17b['src']);
//   console.log("audio 17b src2", this.myaudio17b.src);
//   // console.log("audio 17b src2",JSON.parse(this.myaudio17b["src"]));
//   console.log("audio 18", this.myaudio18)
//   console.log("audio 19", this.myaudio19)
//   console.log("audio 20", this.myaudio20)
//   console.log("audio 21", this.myaudio21)
//   console.log("audio 22", this.myaudio22)
//   console.log("audio 23", this.myaudio23)
//   console.log("audio 24", this.myaudio24)
//   console.log("myaudio20src", this.myaudio20src)
//   console.log("myaudio20duration", this.myaudio20duration)
//   console.log("audiotablejsonconvertedrows", this.audiotablejsonconverted)
//   console.log("audio table", this.audiotable)
//   console.log("jsonconvertedrows", this.jsonconvertedrows)
//   console.log("searchresults", this.searchresults)
//   console.log("searchresultslengths", this.searchresultslength)
// }


// playextractedaudio() {
//   // this.extract = this.myaudio17b['src'];

//   //load audio into memory
//   this.nativeAudio.preloadComplex('myaudioid', '/assets/music.mp3', 1, 1, 0).then((success) => {
//     //success
//     this.Toastvalidation("loaded audio into memory");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });

//   //now play audio
//   this.nativeAudio.play('myaudioid').then((success) => {
//     //success
//     this.Toastvalidation("playing audio");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });

// }

// playmediaaudio() {
//   this.extract = "android_assets/www/" + this.myaudio17b['src'];

//   console.log("extracted audio path", this.extract)

//   //load audio into memory
//   this.nativeAudio.preloadComplex('myaudioid', this.extract, 1, 1, 0).then((success) => {
//     //success
//     this.Toastvalidation("loaded audio into memory");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });

//   //now play audio
//   this.nativeAudio.play('myaudioid').then((success) => {
//     //success
//     this.Toastvalidation("playing audio");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });
// }

// playagain() {
//   this.extract = "/android_assets/www/" + this.myaudio17b['src'];

//   console.log("extracted audio path", this.extract)

//   //load audio into memory
//   this.nativeAudio.preloadComplex('myaudioid', this.extract, 1, 1, 0).then((success) => {
//     //success
//     this.Toastvalidation("loaded audio into memory");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });

//   //now play audio
//   this.nativeAudio.play('myaudioid').then((success) => {
//     //success
//     this.Toastvalidation("playing audio");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });
// }

// tryagain() {
//   this.transferaudio();
//   this.playtransferredaudio();
// }

// transferaudio() {
//   this.extract = this.myaudio17b['src'];

//   let options: FileUploadOptions = {
//     fileKey: 'file',
//     fileName: 'name.mp3',
//     chunkedMode : false
//     // headers: {}
//   }

//   this.fileTransfer.upload(this.extract, 'www/', options)
//     .then((data) => {
//       // success
//       console.log("uploaded")
//       this.alertmsg("uploaded")
//     }, (err) => {
//       // error
//       console.log(err);
//       this.alertmsg(err);
//     });
// }


// playtransferredaudio() {
//   //load audio into memory
//   this.nativeAudio.preloadComplex('myaudioid', this.extract, 1, 1, 0).then((success) => {
//     //success
//     this.Toastvalidation("loaded audio into memory");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });

//   //now play audio
//   this.nativeAudio.play('myaudioid').then((success) => {
//     //success
//     this.Toastvalidation("playing audio");
//   }, (err) => {
//     //error
//     this.alertmsg(err);
//   });
// }

// playdirectfile(){
//   this.myaudio17b.src.play();
// }

// /***********this finally worked */
// playdirectfile2(){
//   let book = this.media.create(this.myaudio17b.src);
//   book.play();
// }

// replace(){
//   var me : string ="data:image/*;charset=utf-8;base64,/9j/4AAQSkZJRgABAQAAAQABAAD"
//   console.log(me);

//   me= me.replace('data:image/*;charset=utf-8;base64,', '')


//   console.log(me)
// }

//download file 
downloadfile() {
  // const fileTransfer: FileTransferObject = this.transfer.create();
  // fileTransfer.download(this.selectedfilepath, this.file.externalRootDirectory + '/CamfilaDownloads/' + this.selectedfilename).then(
  //   (data) => {
  //     this.Toastvalidation("download complete");
  //     console.log("file has been saved to " + 'CamfilaDownloads/' + this.selectedfilename);
  //   }, (err) => {
  //     console.log("download error", err);
  //   });

this.download =false;
this.downloading = true;

  const fileTransfer: FileTransferObject = this.transfer.create();
  fileTransfer.download(this.selectedfilepath, this.file.externalRootDirectory + '/CamfilaDownloads/' + this.selectedfilename).then(
    (data) => {
      this.downloading = false;
      this.download = true;

      this.Toastvalidation("download complete");
      console.log("file has been saved to " + 'CamfilaDownloads/' + this.selectedfilename);
    }, (err) => {
      console.log("download error", err);
    });
}


canceldownload() {
  const fileTransfer: FileTransferObject = this.transfer.create();
  fileTransfer.abort();
}


}
